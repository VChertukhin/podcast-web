{"version":3,"sources":["Preview.tsx"],"names":["React","Button","Div","FixedLayout","PanelHeader","PanelHeaderBack","Text","Header","Card","Link","Group","Headline","Caption","Icon16Play","timeFormat","PodcastSnippet","Preview","Component","constructor","props","podcast","state","image","name","description","every","e","newPodcast","Object","assign","setState","highlightErrors","setPodcast","bind","render","goBack","publishPodcast","backgroundImage","color","author","originalDuration","timeCodes","length","map","timeCode","index","time","height"],"mappings":"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","sourcesContent":["import React from 'react';\nimport {\n  Button,\n  Div,\n  FixedLayout,\n  PanelHeader,\n  PanelHeaderBack,\n  Text,\n  Header,\n  Card,\n  Link,\n  Group,\n  Headline,\n  Caption,\n} from '@vkontakte/vkui';\nimport { Icon16Play } from '@vkontakte/icons';\nimport type { Podcast } from '../types';\nimport { timeFormat } from '../lib';\nimport PodcastSnippet from '../components/PodcastSnippet/PodcastSnippet';\n\ninterface PreviewState {\n  highlightErrors: boolean;\n  podcast: Podcast;\n}\n\nexport interface PreviewProps {\n  // setView: (view: string, name?: string) => void;\n  setPanel: (name: string) => void;\n  goBack: () => void;\n\n  podcast: Podcast;\n  publishPodcast: (p: Podcast) => void;\n}\n\nexport class Preview extends React.Component<PreviewProps, PreviewState> {\n  constructor(props: PreviewProps) {\n    super(props);\n\n    this.state = {\n      highlightErrors: false,\n      podcast: props.podcast,\n    };\n\n    this.setPodcast = this.setPodcast.bind(this);\n  }\n\n  isValid = () => {\n    const { podcast } = this.state;\n    return [podcast.image, podcast.name, podcast.description].every((e) => e);\n  };\n\n  setPodcast = (podcast: Partial<Podcast>): void => {\n    const newPodcast = Object.assign({}, this.state.podcast, podcast);\n    this.setState({ podcast: newPodcast });\n  };\n\n  render(): JSX.Element {\n    const { goBack, podcast, publishPodcast } = this.props;\n    // const {  } = this.state;\n\n    return (\n      <>\n        <PanelHeader left={<PanelHeaderBack onClick={() => goBack()} />}>\n          Новый подкаст\n        </PanelHeader>\n        <Group>\n          <Div className=\"PodcastInfo\">\n            <Card\n              className=\"Cover\"\n              style={{ backgroundImage: `url(${podcast.image})` }}\n            >\n              <div className=\"Button\">\n                <Icon16Play />\n              </div>\n            </Card>\n            <div className=\"PodcastInfo__text\">\n              <Headline weight=\"medium\">{podcast.name}</Headline>\n              <Caption\n                weight=\"regular\"\n                level=\"2\"\n                style={{ color: 'var(--text_name)' }}\n              >\n                Сообщество {podcast.author}\n              </Caption>\n              <Caption\n                weight=\"regular\"\n                level=\"2\"\n                style={{ color: 'var(--text_secondary)' }}\n              >\n                Длительность: {timeFormat(podcast.originalDuration)}\n              </Caption>\n            </div>\n          </Div>\n        </Group>\n        <Group>\n          <Header>Описание:</Header>\n          <Div>\n            <Text weight=\"regular\">{podcast.description}</Text>\n          </Div>\n        </Group>\n        {podcast.timeCodes.length > 0 && (\n          <Group>\n            <Header>Таймкоды:</Header>\n            {podcast.timeCodes.map((timeCode, index) => (\n              <Div key={index}>\n                <Link>{timeFormat(timeCode.time)}</Link> — {timeCode.name}\n              </Div>\n            ))}\n          </Group>\n        )}\n        <Group>\n          <Header>Сниппет:</Header>\n          <Div>\n            <PodcastSnippet podcast={podcast} />\n          </Div>\n        </Group>\n        <div style={{ height: 68 }} />\n        <FixedLayout filled vertical=\"bottom\">\n          <Div>\n            <Button\n              stretched\n              size=\"l\"\n              onClick={() => {\n                publishPodcast(podcast);\n              }}\n            >\n              Опубликовать подкаст\n            </Button>\n          </Div>\n        </FixedLayout>\n      </>\n    );\n  }\n}\n"]}