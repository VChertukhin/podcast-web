{"version":3,"sources":["Edit.tsx"],"names":["React","PanelHeader","PanelHeaderBack","AudioEditor","TimeCodeEditor","Edit","Component","constructor","props","podcast","newPodcast","Object","assign","state","setState","highlightErrors","setPodcast","bind","render","goBack","updatePodcast"],"mappings":";;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,WAAT,EAAsBC,eAAtB,QAA6C,iBAA7C;AAEA,OAAOC,WAAP,MAAwB,2BAAxB;AACA,OAAOC,cAAP,MAA2B,6CAA3B;AAgBA,OAAO,MAAMC,IAAN,SAAmBL,KAAK,CAACM,SAAzB,CAAyD;AAC9DC,EAAAA,WAAW,CAACC,KAAD,EAAmB;AAC5B,UAAMA,KAAN;;AAD4B,wCAWhBC,OAAD,IAAqC;AAChD,YAAMC,UAAU,GAAGC,MAAM,CAACC,MAAP,CAAc,EAAd,EAAkB,KAAKC,KAAL,CAAWJ,OAA7B,EAAsCA,OAAtC,CAAnB;AACA,WAAKK,QAAL,CAAc;AAAEL,QAAAA,OAAO,EAAEC;AAAX,OAAd;AACD,KAd6B;;AAG5B,SAAKG,KAAL,GAAa;AACXE,MAAAA,eAAe,EAAE,KADN;AAEXN,MAAAA,OAAO,EAAED,KAAK,CAACC;AAFJ,KAAb;AAKA,SAAKO,UAAL,GAAkB,KAAKA,UAAL,CAAgBC,IAAhB,CAAqB,IAArB,CAAlB;AACD;;AAODC,EAAAA,MAAM,GAAgB;AACpB,UAAM;AAAEC,MAAAA,MAAF;AAAUV,MAAAA,OAAV;AAAmBW,MAAAA;AAAnB,QAAqC,KAAKZ,KAAhD,CADoB,CAEpB;;AAEA,wBACE,uDACE,oBAAC,WAAD;AAAa,MAAA,IAAI,eAAE,oBAAC,eAAD;AAAiB,QAAA,OAAO,EAAE,MAAMW,MAAM;AAAtC;AAAnB,8FADF,eAIE,oBAAC,WAAD;AAAa,MAAA,OAAO,EAAEV;AAAtB,MAJF,eAKE,oBAAC,cAAD;AAAgB,MAAA,OAAO,EAAEA,OAAzB;AAAkC,MAAA,aAAa,EAAEW;AAAjD,MALF,CADF;AASD;;AA9B6D","sourcesContent":["import React from 'react';\nimport { PanelHeader, PanelHeaderBack } from '@vkontakte/vkui';\nimport type { Podcast } from '../types';\nimport AudioEditor from '../components/AudioEditor';\nimport TimeCodeEditor from '../components/TimeCodeEditor/TimeCodeEditor';\n\ninterface EditState {\n  highlightErrors: boolean;\n  podcast: Podcast;\n}\n\nexport interface EditProps {\n  // setView: (view: string, name?: string) => void;\n  setPanel: (name: string) => void;\n  goBack: () => void;\n\n  podcast: Podcast;\n  updatePodcast: (p: Podcast) => void;\n}\n\nexport class Edit extends React.Component<EditProps, EditState> {\n  constructor(props: EditProps) {\n    super(props);\n\n    this.state = {\n      highlightErrors: false,\n      podcast: props.podcast,\n    };\n\n    this.setPodcast = this.setPodcast.bind(this);\n  }\n\n  setPodcast = (podcast: Partial<Podcast>): void => {\n    const newPodcast = Object.assign({}, this.state.podcast, podcast);\n    this.setState({ podcast: newPodcast });\n  };\n\n  render(): JSX.Element {\n    const { goBack, podcast, updatePodcast } = this.props;\n    // const {  } = this.state;\n\n    return (\n      <>\n        <PanelHeader left={<PanelHeaderBack onClick={() => goBack()} />}>\n          Редактирование\n        </PanelHeader>\n        <AudioEditor podcast={podcast} />\n        <TimeCodeEditor podcast={podcast} updatePodcast={updatePodcast} />\n      </>\n    );\n  }\n}\n"]}