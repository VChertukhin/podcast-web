{"version":3,"sources":["index.js"],"names":["Region","RegionsPlugin","create","params","name","deferInit","staticProps","addRegion","options","initialisedPluginList","regions","initPlugin","add","clearRegions","clear","enableDragSelection","disableDragSelection","instance","constructor","ws","wavesurfer","util","getRegionSnapToGridValue","value","maxRegions","observerPrototypeKeys","Object","getOwnPropertyNames","Observer","prototype","forEach","key","_onBackendCreated","wrapper","drawer","region","list","_onReady","dragSelection","keys","id","updateRender","init","isReady","once","destroy","un","wouldExceedMaxRegions","length","on","remove","slop","container","scroll","scrollParent","scrollSpeed","scrollThreshold","drag","duration","getDuration","maxScroll","start","touchId","pxMove","scrollDirection","wrapperRect","edgeScroll","e","scrollLeft","Math","min","max","end","handleEvent","update","window","requestAnimationFrame","eventDown","touches","targetTouches","identifier","scrollWidth","clientWidth","getBoundingClientRect","addEventListener","removeEventListener","eventUp","preventClick","fireEvent","document","body","eventMove","startUpdate","endUpdate","x","clientX","left","right","getCurrentRegion","time","getCurrentTime","cur","snapToGridInterval","offset","snapToGridOffset","round"],"mappings":"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","sourcesContent":["/**\n *  @since 4.0.0 This class has been split\n *\n * @typedef {Object} RegionsPluginParams\n * @property {?boolean} dragSelection Enable creating regions by dragging with\n * the mouse\n * @property {?RegionParams[]} regions Regions that should be added upon\n * initialisation\n * @property {number} slop=2 The sensitivity of the mouse dragging\n * @property {?number} snapToGridInterval Snap the regions to a grid of the specified multiples in seconds\n * @property {?number} snapToGridOffset Shift the snap-to-grid by the specified seconds. May also be negative.\n * @property {?boolean} deferInit Set to true to manually call\n * @property {number[]} maxRegions Maximum number of regions that may be created by the user at one time.\n * `initPlugin('regions')`\n * @property {function} formatTimeCallback Allows custom formating for region tooltip.\n */\n\n/**\n * @typedef {Object} RegionParams\n * @desc The parameters used to describe a region.\n * @example wavesurfer.addRegion(regionParams);\n * @property {string} id=→random The id of the region\n * @property {number} start=0 The start position of the region (in seconds).\n * @property {number} end=0 The end position of the region (in seconds).\n * @property {?boolean} loop Whether to loop the region when played back.\n * @property {boolean} drag=true Allow/disallow dragging the region.\n * @property {boolean} resize=true Allow/disallow resizing the region.\n * @property {string} [color='rgba(0, 0, 0, 0.1)'] HTML color code.\n * @property {?number} channelIdx Select channel to draw the region on (if there are multiple channel waveforms).\n * @property {?object} handleStyle A set of CSS properties used to style the left and right handle.\n * @property {?boolean} preventContextMenu=false Determines whether the context menu is prevented from being opened.\n */\n\nimport { Region } from './region.js';\n\n/**\n * Regions are visual overlays on waveform that can be used to play and loop\n * portions of audio. Regions can be dragged and resized.\n *\n * Visual customization is possible via CSS (using the selectors\n * `.wavesurfer-region` and `.wavesurfer-handle`).\n *\n * @implements {PluginClass}\n * @extends {Observer}\n *\n * @example\n * // es6\n * import RegionsPlugin from 'wavesurfer.regions.js';\n *\n * // commonjs\n * var RegionsPlugin = require('wavesurfer.regions.js');\n *\n * // if you are using <script> tags\n * var RegionsPlugin = window.WaveSurfer.regions;\n *\n * // ... initialising wavesurfer with the plugin\n * var wavesurfer = WaveSurfer.create({\n *   // wavesurfer options ...\n *   plugins: [\n *     RegionsPlugin.create({\n *       // plugin options ...\n *     })\n *   ]\n * });\n */\nexport default class RegionsPlugin {\n  /**\n   * Regions plugin definition factory\n   *\n   * This function must be used to create a plugin definition which can be\n   * used by wavesurfer to correctly instantiate the plugin.\n   *\n   * @param {RegionsPluginParams} params parameters use to initialise the plugin\n   * @return {PluginDefinition} an object representing the plugin\n   */\n  static create(params) {\n    return {\n      name: 'regions',\n      deferInit: params && params.deferInit ? params.deferInit : false,\n      params: params,\n      staticProps: {\n        addRegion(options) {\n          if (!this.initialisedPluginList.regions) {\n            this.initPlugin('regions');\n          }\n          return this.regions.add(options);\n        },\n\n        clearRegions() {\n          this.regions && this.regions.clear();\n        },\n\n        enableDragSelection(options) {\n          if (!this.initialisedPluginList.regions) {\n            this.initPlugin('regions');\n          }\n          this.regions.enableDragSelection(options);\n        },\n\n        disableDragSelection() {\n          this.regions.disableDragSelection();\n        },\n      },\n      instance: RegionsPlugin,\n    };\n  }\n\n  constructor(params, ws) {\n    this.params = params;\n    this.wavesurfer = ws;\n    this.util = {\n      ...ws.util,\n      getRegionSnapToGridValue: (value) => {\n        return this.getRegionSnapToGridValue(value, params);\n      },\n    };\n    this.maxRegions = params.maxRegions;\n\n    // turn the plugin instance into an observer\n    const observerPrototypeKeys = Object.getOwnPropertyNames(\n      this.util.Observer.prototype,\n    );\n    observerPrototypeKeys.forEach((key) => {\n      Region.prototype[key] = this.util.Observer.prototype[key];\n    });\n    this.wavesurfer.Region = Region;\n\n    this._onBackendCreated = () => {\n      this.wrapper = this.wavesurfer.drawer.wrapper;\n      if (this.params.regions) {\n        this.params.regions.forEach((region) => {\n          this.add(region);\n        });\n      }\n    };\n\n    // Id-based hash of regions\n    this.list = {};\n    this._onReady = () => {\n      this.wrapper = this.wavesurfer.drawer.wrapper;\n      if (this.params.dragSelection) {\n        this.enableDragSelection(this.params);\n      }\n      Object.keys(this.list).forEach((id) => {\n        this.list[id].updateRender();\n      });\n    };\n  }\n\n  init() {\n    // Check if ws is ready\n    if (this.wavesurfer.isReady) {\n      this._onBackendCreated();\n      this._onReady();\n    } else {\n      this.wavesurfer.once('ready', this._onReady);\n      this.wavesurfer.once('backend-created', this._onBackendCreated);\n    }\n  }\n\n  destroy() {\n    this.wavesurfer.un('ready', this._onReady);\n    this.wavesurfer.un('backend-created', this._onBackendCreated);\n    this.disableDragSelection();\n    this.clear();\n  }\n\n  /**\n   * check to see if adding a new region would exceed maxRegions\n   * @return {boolean} whether we should proceed and create a region\n   * @private\n   */\n  wouldExceedMaxRegions() {\n    return this.maxRegions && Object.keys(this.list).length >= this.maxRegions;\n  }\n\n  /**\n   * Add a region\n   *\n   * @param {object} params Region parameters\n   * @return {Region} The created region\n   */\n  add(params) {\n    if (this.wouldExceedMaxRegions()) return null;\n\n    const region = new this.wavesurfer.Region(\n      params,\n      this.util,\n      this.wavesurfer,\n    );\n\n    this.list[region.id] = region;\n\n    region.on('remove', () => {\n      delete this.list[region.id];\n    });\n\n    return region;\n  }\n\n  /**\n   * Remove all regions\n   */\n  clear() {\n    Object.keys(this.list).forEach((id) => {\n      this.list[id].remove();\n    });\n  }\n\n  enableDragSelection(params) {\n    this.disableDragSelection();\n\n    const slop = params.slop || 2;\n    const container = this.wavesurfer.drawer.container;\n    const scroll =\n      params.scroll !== false && this.wavesurfer.params.scrollParent;\n    const scrollSpeed = params.scrollSpeed || 1;\n    const scrollThreshold = params.scrollThreshold || 10;\n    let drag;\n    let duration = this.wavesurfer.getDuration();\n    let maxScroll;\n    let start;\n    let region;\n    let touchId;\n    let pxMove = 0;\n    let scrollDirection;\n    let wrapperRect;\n\n    // Scroll when the user is dragging within the threshold\n    const edgeScroll = (e) => {\n      if (!region || !scrollDirection) {\n        return;\n      }\n\n      // Update scroll position\n      let scrollLeft = this.wrapper.scrollLeft + scrollSpeed * scrollDirection;\n      this.wrapper.scrollLeft = scrollLeft = Math.min(\n        maxScroll,\n        Math.max(0, scrollLeft),\n      );\n\n      // Update range\n      const end = this.wavesurfer.drawer.handleEvent(e);\n      region.update({\n        start: Math.min(end * duration, start * duration),\n        end: Math.max(end * duration, start * duration),\n      });\n\n      // Check that there is more to scroll and repeat\n      if (scrollLeft < maxScroll && scrollLeft > 0) {\n        window.requestAnimationFrame(() => {\n          edgeScroll(e);\n        });\n      }\n    };\n\n    const eventDown = (e) => {\n      if (e.touches && e.touches.length > 1) {\n        return;\n      }\n      duration = this.wavesurfer.getDuration();\n      touchId = e.targetTouches ? e.targetTouches[0].identifier : null;\n\n      // Store for scroll calculations\n      maxScroll = this.wrapper.scrollWidth - this.wrapper.clientWidth;\n      wrapperRect = this.wrapper.getBoundingClientRect();\n\n      drag = true;\n      start = this.wavesurfer.drawer.handleEvent(e, true);\n      region = null;\n      scrollDirection = null;\n    };\n    this.wrapper.addEventListener('mousedown', eventDown);\n    this.wrapper.addEventListener('touchstart', eventDown);\n    this.on('disable-drag-selection', () => {\n      this.wrapper.removeEventListener('touchstart', eventDown);\n      this.wrapper.removeEventListener('mousedown', eventDown);\n    });\n\n    const eventUp = (e) => {\n      if (e.touches && e.touches.length > 1) {\n        return;\n      }\n\n      drag = false;\n      pxMove = 0;\n      scrollDirection = null;\n\n      if (region) {\n        this.util.preventClick();\n        region.fireEvent('update-end', e);\n        this.wavesurfer.fireEvent('region-update-end', region, e);\n      }\n\n      region = null;\n    };\n    this.wrapper.addEventListener('mouseup', eventUp);\n    this.wrapper.addEventListener('touchend', eventUp);\n\n    document.body.addEventListener('mouseup', eventUp);\n    document.body.addEventListener('touchend', eventUp);\n    this.on('disable-drag-selection', () => {\n      document.body.removeEventListener('mouseup', eventUp);\n      document.body.removeEventListener('touchend', eventUp);\n      this.wrapper.removeEventListener('touchend', eventUp);\n      this.wrapper.removeEventListener('mouseup', eventUp);\n    });\n\n    const eventMove = (e) => {\n      if (!drag) {\n        return;\n      }\n      if (++pxMove <= slop) {\n        return;\n      }\n\n      if (e.touches && e.touches.length > 1) {\n        return;\n      }\n      if (e.targetTouches && e.targetTouches[0].identifier != touchId) {\n        return;\n      }\n\n      // auto-create a region during mouse drag, unless region-count would exceed \"maxRegions\"\n      if (!region) {\n        region = this.add(params || {});\n        if (!region) return;\n      }\n\n      const end = this.wavesurfer.drawer.handleEvent(e);\n      const startUpdate = this.wavesurfer.regions.util.getRegionSnapToGridValue(\n        start * duration,\n      );\n      const endUpdate = this.wavesurfer.regions.util.getRegionSnapToGridValue(\n        end * duration,\n      );\n      region.update({\n        start: Math.min(endUpdate, startUpdate),\n        end: Math.max(endUpdate, startUpdate),\n      });\n\n      // If scrolling is enabled\n      if (scroll && container.clientWidth < this.wrapper.scrollWidth) {\n        // Check threshold based on mouse\n        const x = e.clientX - wrapperRect.left;\n        if (x <= scrollThreshold) {\n          scrollDirection = -1;\n        } else if (x >= wrapperRect.right - scrollThreshold) {\n          scrollDirection = 1;\n        } else {\n          scrollDirection = null;\n        }\n        scrollDirection && edgeScroll(e);\n      }\n    };\n    this.wrapper.addEventListener('mousemove', eventMove);\n    this.wrapper.addEventListener('touchmove', eventMove);\n    this.on('disable-drag-selection', () => {\n      this.wrapper.removeEventListener('touchmove', eventMove);\n      this.wrapper.removeEventListener('mousemove', eventMove);\n    });\n  }\n\n  disableDragSelection() {\n    this.fireEvent('disable-drag-selection');\n  }\n\n  /**\n   * Get current region\n   *\n   * The smallest region that contains the current time. If several such\n   * regions exist, take the first. Return `null` if none exist.\n   *\n   * @returns {Region} The current region\n   */\n  getCurrentRegion() {\n    const time = this.wavesurfer.getCurrentTime();\n    let min = null;\n    Object.keys(this.list).forEach((id) => {\n      const cur = this.list[id];\n      if (cur.start <= time && cur.end >= time) {\n        if (!min || cur.end - cur.start < min.end - min.start) {\n          min = cur;\n        }\n      }\n    });\n\n    return min;\n  }\n\n  /**\n   * Match the value to the grid, if required\n   *\n   * If the regions plugin params have a snapToGridInterval set, return the\n   * value matching the nearest grid interval. If no snapToGridInterval is set,\n   * the passed value will be returned without modification.\n   *\n   * @param {number} value the value to snap to the grid, if needed\n   * @param {Object} params the regions plugin params\n   * @returns {number} value\n   */\n  getRegionSnapToGridValue(value, params) {\n    if (params.snapToGridInterval) {\n      // the regions should snap to a grid\n      const offset = params.snapToGridOffset || 0;\n      return (\n        Math.round((value - offset) / params.snapToGridInterval) *\n          params.snapToGridInterval +\n        offset\n      );\n    }\n\n    // no snap-to-grid\n    return value;\n  }\n}\n"]}