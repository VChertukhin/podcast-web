{"version":3,"sources":["TimeCodeEditor.tsx"],"names":["React","Group","Header","CellButton","Caption","Div","List","Cell","Input","platform","IOS","Icon24Add","timeFormat","IMaskMixin","IMask","Icon24AddCircle","sortingTimeCode","a","b","time","MaskedInput","inputRef","props","TimeCodeEditor","Component","constructor","podcast","newPodcast","Object","assign","updatePodcast","index","name","newTimeCodes","timeCodes","setPodcast","timestamp","find","match","parseInt","unshift","sort","splice","state","bind","render","map","timeCode","removePodcastTimeCodeTime","e","setPodcastTimeCodeName","target","value","MM","mask","MaskedRange","from","to","SS","setPodcastTimeCodeTime","sortPodcast","addPodcastTimeCode","color"],"mappings":"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","sourcesContent":["import React from 'react';\nimport {\n  Group,\n  Header,\n  CellButton,\n  Caption,\n  Div,\n  List,\n  Cell,\n  Input,\n  platform,\n  IOS,\n} from '@vkontakte/vkui';\nimport type { Podcast, TimeCode } from '../../types';\nimport { Icon24Add } from '@vkontakte/icons';\nimport { timeFormat } from '../../lib';\nimport { IMaskMixin } from 'react-imask';\nimport type { IMaskMixinProps } from 'react-imask';\nimport IMask from 'imask';\nimport type { InputProps } from '@vkontakte/vkui/dist/components/Input/Input';\nimport { Icon24AddCircle } from '../icons';\n\nconst sortingTimeCode = (a: TimeCode, b: TimeCode) => {\n  return a.time - b.time;\n};\n\ninterface MaskedInputProps extends InputProps, IMaskMixinProps {}\n\nconst MaskedInput = IMaskMixin<MaskedInputProps>(({ inputRef, ...props }) => (\n  <Input {...props} getRef={inputRef} />\n));\n\nexport interface TimeCodeEditorProps {\n  podcast: Podcast;\n  updatePodcast: (p: Podcast) => void;\n}\n\nexport class TimeCodeEditor extends React.Component<TimeCodeEditorProps> {\n  constructor(props: TimeCodeEditorProps) {\n    super(props);\n\n    this.state = {\n      podcast: props.podcast,\n    };\n\n    this.setPodcast = this.setPodcast.bind(this);\n  }\n\n  setPodcast = (podcast: Partial<Podcast>): void => {\n    const newPodcast = Object.assign({}, this.props.podcast, podcast);\n    this.props.updatePodcast(newPodcast);\n  };\n\n  setPodcastTimeCodeName = (index: number, name: string) => {\n    const newTimeCodes = [...this.props.podcast.timeCodes];\n    newTimeCodes[index].name = name;\n    this.setPodcast({ timeCodes: newTimeCodes });\n  };\n\n  setPodcastTimeCodeTime = (index: number, time: string) => {\n    let timestamp = 0;\n    const find = time.match(/([\\d]{2}):([\\d]{2})/);\n    if (find) {\n      timestamp = parseInt(find[2]) + parseInt(find[1]) * 60;\n\n      const newTimeCodes = [...this.props.podcast.timeCodes];\n      newTimeCodes[index].time = timestamp;\n      this.setPodcast({ timeCodes: newTimeCodes });\n    }\n  };\n\n  addPodcastTimeCode = () => {\n    const newTimeCodes = [...this.props.podcast.timeCodes];\n    newTimeCodes.unshift({ name: 'Название', time: 0 });\n    this.setPodcast({ timeCodes: newTimeCodes });\n  };\n\n  sortPodcast = () => {\n    this.setPodcast({\n      timeCodes: [...this.props.podcast.timeCodes].sort(sortingTimeCode),\n    });\n  };\n\n  removePodcastTimeCodeTime = (index: number) => {\n    const newTimeCodes = [...this.props.podcast.timeCodes];\n    newTimeCodes.splice(index, 1);\n    this.setPodcast({ timeCodes: newTimeCodes });\n  };\n\n  render(): JSX.Element {\n    const { podcast } = this.props;\n    // const {  } = this.state;\n\n    return (\n      <Group\n        header={<Header mode=\"secondary\">Таймкоды</Header>}\n        className=\"TimeCodeEditor\"\n      >\n        <List>\n          {podcast.timeCodes.map((timeCode, index) => (\n            <Cell\n              removable\n              key={index}\n              onRemove={() => this.removePodcastTimeCodeTime(index)}\n            >\n              <div className=\"TimeCodeEditorInput\">\n                <Input\n                  value={timeCode.name}\n                  onChange={(e) =>\n                    this.setPodcastTimeCodeName(index, e.target.value)\n                  }\n                />\n                <MaskedInput\n                  mask=\"MM:SS\"\n                  blocks={{\n                    MM: {\n                      mask: IMask.MaskedRange,\n                      from: 0,\n                      to: 99,\n                    },\n                    SS: {\n                      mask: IMask.MaskedRange,\n                      from: 0,\n                      to: 59,\n                    },\n                  }}\n                  value={timeFormat(timeCode.time)}\n                  onAccept={(value) => {\n                    this.setPodcastTimeCodeTime(index, value);\n                  }}\n                  onBlur={() => {\n                    this.sortPodcast();\n                  }}\n                />\n              </div>\n            </Cell>\n          ))}\n        </List>\n        <CellButton\n          before={platform() === IOS ? <Icon24AddCircle /> : <Icon24Add />}\n          onClick={this.addPodcastTimeCode}\n        >\n          Добавить таймкод\n        </CellButton>\n        <Div>\n          <Caption\n            weight=\"regular\"\n            level=\"1\"\n            style={{ color: 'var(--text_secondary)' }}\n          >\n            Отметки времени с названием темы. Позволяют слушателям легче\n            путешествовать по подкасту.\n          </Caption>\n        </Div>\n      </Group>\n    );\n  }\n}\n\nexport default TimeCodeEditor;\n"]}